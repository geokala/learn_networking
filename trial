#! /usr/bin/env python
import cmd
from learn_network.runner import Runner
import os
import sys
import yaml


class CLI(cmd.Cmd):
    def __init__(self):
        super(CLI, self).__init__()
        self.prompt = "Scenario not loaded. Use 'load' to load one> "
        self.do_load = self._load
        self.help_load = self._load_help
        self.complete_load = self._load_complete
        self.runner = Runner()

    def do_exit(self, _):
        print('Exiting.')
        sys.exit(0)

    def get_names(self):
        return dir(self)

    def default(self, line):
        cmd_map = {
            'EOF': self.do_exit,
            'quit': self.do_exit,
        }

        command = cmd_map.get(line)
        if command is None:
            super(CLI, self).default(line)
        else:
            command(None)

    def help_exit(self):
        print('Exit.')

    def _load(self, filename):
        if os.path.isfile(filename):
            self.runner.load_nodes_from_yaml(filename)
            self.runner.load_objectives_from_yaml(filename)
            self.runner.prepare_objective()
            self.prompt = '{filename}> '.format(filename=filename)
            self.set_loaded_commands()
            print('Scenario loaded')
        else:
            print('Could not find {file}'.format(file=filename))

    def _load_help(self):
        print('Load a scenario from given filename.')

    def _load_complete(self, text, line, begidx, endidx):
        full_path = line[len('load '):]
        path, file_fragment = os.path.split(full_path)
        path = path or '.'
        if not os.path.isdir(path):
            return []
        else:
            possible_results = os.listdir(path)
            return [
                result for result in possible_results
                if result.startswith(text)
            ]

    def _loaded_complete(self, text, line, begidx, endidx):
        return []

    def _loaded(self, filename):
        # TODO: There should be a command to restart
        print('Scenario already loaded.')

    def _loaded_help(self):
        print('This does nothing, you are already in a scenario.')

    def set_loaded_commands(self):
        self.do_load = self._loaded
        self.help_load = self._loaded_help
        self.complete_load = self._loaded_complete
        self.do_check = self._do_check
        # TODO: help check
        self.do_list_nodes = self._do_list_nodes
        # TODO: help list_nodes
        self.do_list_packets = self._do_list_packets
        # TODO: help list_packets
        self.do_route_packets = self._do_route_packets
        # TODO: help route_packets

    def _do_list_nodes(self, line):
        print(self.runner.nodes.list_nodes())

    def _do_check(self, line):
        #  TODO: Nicer output
        print(yaml.dump(self.runner.run_and_check(),
              default_flow_style=False))

    def _do_list_packets(self, line):
        for node in self.runner.nodes.nodes.values():
            print('===========================')
            print(node.id)
            print('Queued:')
            for packet in node.packets:
                print('  Source: {source}'.format(
                    source=packet.source_address,
                ))
                print('  Destination: {destination}'.format(
                    destination=packet.destination_address,
                ))
                print('  TTL: {ttl}'.format(ttl=packet.ttl))
                print('  Content: {content}'.format(
                    content=packet.content,
                ))
                print('')
            print('Received:')
            for packet in node.received_packets:
                print('  Source: {source}'.format(
                    source=packet.source_address,
                ))
                print('  TTL: {ttl}'.format(ttl=packet.ttl))
                print('  Content: {content}'.format(
                    content=packet.content,
                ))
                print('')
            print('Unroutable:')
            for packet in node.unroutable_packets:
                print('  Source: {source}'.format(
                    source=packet.source_address,
                ))
                print('  Destination: {destination}'.format(
                    destination=packet.destination_address,
                ))
                print('  TTL: {ttl}'.format(ttl=packet.ttl))
                print('  Content: {content}'.format(
                    content=packet.content,
                ))
                print('')
            print('Expired:')
            for packet in node.expired_packets:
                print('  Source: {source}'.format(
                    source=packet.source_address,
                ))
                print('  Destination: {destination}'.format(
                    destination=packet.destination_address,
                ))
                print('  Content: {content}'.format(
                    content=packet.content,
                ))
                print('')

    def _do_route_packets(self, line):
        self.runner.route_packets()

    # TODO: List nodes
    # TODO: List connections?
    # TODO: Create packets
    # TODO: Attempt validation (showing step by step what happened on failure)

if __name__ == '__main__':
    cli = CLI()
    cli.cmdloop()
